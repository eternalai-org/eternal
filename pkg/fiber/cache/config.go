package cache

import (
	"bytes"
	"time"

	"github.com/gofiber/fiber/v2"
)

const CachePrefix string = "fibercache_"

// Config defines the config for middleware.
type Config struct {
	// Next defines a function to skip this middleware when returned true.
	//
	// Optional. Default: nil
	Next func(c *fiber.Ctx) bool

	// Expiration is the time that an cached response will live
	//
	// Optional. Default: 1 * time.Minute
	Expiration time.Duration

	// CacheHeader header on response header, indicate cache status, with the following possible return value
	//
	// hit, miss, unreachable
	//
	// Optional. Default: X-Cache
	CacheHeader string

	// CacheControl enables client side caching if set to true
	//
	// Optional. Default: false
	CacheControl bool

	// Key allows you to generate custom keys, by default c.Path() is used
	//
	// Default: func(c *fiber.Ctx) string {
	//   return utils.CopyString(c.Path())
	// }
	KeyGenerator func(*fiber.Ctx) string

	// allows you to generate custom Expiration Key By Key, default is Expiration (Optional)
	//
	// Default: nil
	ExpirationGenerator func(*fiber.Ctx, *Config) time.Duration

	// Store is used to store the state of the middleware
	//
	// Default: an in memory store for this process only
	Storage fiber.Storage

	// Deprecated: Use Storage instead
	Store fiber.Storage

	// Deprecated: Use KeyGenerator instead
	Key func(*fiber.Ctx) string

	// allows you to store additional headers generated by next middlewares & handler
	//
	// Default: false
	StoreResponseHeaders bool

	// Max number of bytes of response bodies simultaneously stored in cache. When limit is reached,
	// entries with the nearest expiration are deleted to make room for new.
	// 0 means no limit
	//
	// Default: 0
	MaxBytes uint

	// You can specify HTTP methods to cache.
	// The middleware just caches the routes of its methods in this slice.
	//
	// Default: []string{fiber.MethodGet, fiber.MethodHead}
	Methods []string
}

func configDefault(expireTime time.Duration, fiberStore fiber.Storage) Config {
	return Config{
		Expiration:   expireTime,
		CacheHeader:  "X-Fiber-Cache",
		CacheControl: false,
		KeyGenerator: func(c *fiber.Ctx) string {
			return CachePrefix + bytes.NewBuffer(c.Request().RequestURI()).String()
		},
		Storage: fiberStore,
		Methods: []string{fiber.MethodGet, fiber.MethodHead},
	}
}
